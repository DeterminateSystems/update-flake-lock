{"version":3,"sources":["../src/nix.ts","../src/index.ts"],"sourcesContent":["// Build the Nix args out of inputs from the Actions environment\nexport function makeNixCommandArgs(\n  nixOptions: string[],\n  flake: string | null,\n  flakeInputs: string[],\n  commitMessage: string | null,\n): string[] {\n  // NOTE(cole-h): In Nix versions 2.23.0 and later, `commit-lockfile-summary` became an alias to\n  // the setting `commit-lock-file-summary` (https://github.com/NixOS/nix/pull/10691), and Nix does\n  // not treat aliases the same as their \"real\" setting by requiring setting aliases to be\n  // configured via `--option <alias name> <option value>`\n  // (https://github.com/NixOS/nix/issues/10989).\n  // So, we go the long way so that we can support versions both before and after Nix 2.23.0.\n  const lockfileSummaryFlags = commitMessage\n    ? [\"--option\", \"commit-lockfile-summary\", commitMessage]\n    : [];\n\n  return nixOptions\n    .concat([\"flake\", \"update\"])\n    .concat(flake ? [\"--flake\", flake] : [])\n    .concat(flakeInputs)\n    .concat([\"--commit-lock-file\"])\n    .concat(lockfileSummaryFlags);\n}\n","import { makeNixCommandArgs } from \"./nix.js\";\nimport * as actionsCore from \"@actions/core\";\nimport * as actionsExec from \"@actions/exec\";\nimport { DetSysAction, inputs } from \"detsys-ts\";\n\nconst EVENT_EXECUTION_FAILURE = \"execution_failure\";\n\nclass UpdateFlakeLockAction extends DetSysAction {\n  private commitMessage: string | null;\n  private nixOptions: string[];\n  private flakeInputs: string[];\n  private flakes: string[];\n\n  constructor() {\n    super({\n      name: \"update-flake-lock\",\n      fetchStyle: \"universal\",\n      requireNix: \"fail\",\n    });\n\n    this.commitMessage = inputs.getStringOrNull(\"commit-msg\");\n    this.flakeInputs = inputs.getArrayOfStrings(\"inputs\", \"space\");\n    this.nixOptions = inputs.getArrayOfStrings(\"nix-options\", \"space\");\n    this.flakes = actionsCore\n      .getMultilineInput(\"flakes\")\n      .concat(inputs.getStringOrNull(\"path-to-flake-dir\") ?? []);\n  }\n\n  async main(): Promise<void> {\n    await this.update();\n  }\n\n  // No post phase\n  async post(): Promise<void> {}\n\n  async update(): Promise<void> {\n    for (const flake of this.flakes.length > 0 ? this.flakes : [null]) {\n      // Nix command of this form:\n      // nix ${maybe nix options} flake update ${maybe --flake flake} ${maybe inputs} --commit-lock-file ${maybe --commit-lockfile-summary commit message}\n      // Example commands:\n      // nix --extra-substituters https://example.com flake update nixpkgs --commit-lock-file --commit-lockfile-summary \"updated flake.lock\"\n      // nix flake update --flake flake-dir/ --commit-lock-file\n      const nixCommandArgs: string[] = makeNixCommandArgs(\n        this.nixOptions,\n        flake,\n        this.flakeInputs,\n        this.commitMessage,\n      );\n\n      actionsCore.debug(\n        JSON.stringify({\n          options: this.nixOptions,\n          flake,\n          inputs: this.flakeInputs,\n          message: this.commitMessage,\n          args: nixCommandArgs,\n        }),\n      );\n\n      const execOptions: actionsExec.ExecOptions = {\n        ignoreReturnCode: true,\n      };\n\n      const exitCode = await actionsExec.exec(\n        \"nix\",\n        nixCommandArgs,\n        execOptions,\n      );\n\n      if (exitCode !== 0) {\n        this.recordEvent(EVENT_EXECUTION_FAILURE, {\n          exitCode,\n        });\n        actionsCore.setFailed(`non-zero exit code of ${exitCode} detected`);\n      } else {\n        actionsCore.info(`flake.lock file was successfully updated`);\n      }\n    }\n  }\n}\n\nfunction main(): void {\n  new UpdateFlakeLockAction().execute();\n}\n\nmain();\n"],"mappings":";AACO,SAAS,mBACd,YACA,OACA,aACA,eACU;AAOV,QAAM,uBAAuB,gBACzB,CAAC,YAAY,2BAA2B,aAAa,IACrD,CAAC;AAEL,SAAO,WACJ,OAAO,CAAC,SAAS,QAAQ,CAAC,EAC1B,OAAO,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,EACtC,OAAO,WAAW,EAClB,OAAO,CAAC,oBAAoB,CAAC,EAC7B,OAAO,oBAAoB;AAChC;;;ACtBA,YAAY,iBAAiB;AAC7B,YAAY,iBAAiB;AAC7B,SAAS,cAAc,cAAc;AAErC,IAAM,0BAA0B;AAEhC,IAAM,wBAAN,cAAoC,aAAa;AAAA,EAM/C,cAAc;AACZ,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,YAAY;AAAA,IACd,CAAC;AAED,SAAK,gBAAgB,OAAO,gBAAgB,YAAY;AACxD,SAAK,cAAc,OAAO,kBAAkB,UAAU,OAAO;AAC7D,SAAK,aAAa,OAAO,kBAAkB,eAAe,OAAO;AACjE,SAAK,SACF,8BAAkB,QAAQ,EAC1B,OAAO,OAAO,gBAAgB,mBAAmB,KAAK,CAAC,CAAC;AAAA,EAC7D;AAAA,EAEA,MAAM,OAAsB;AAC1B,UAAM,KAAK,OAAO;AAAA,EACpB;AAAA;AAAA,EAGA,MAAM,OAAsB;AAAA,EAAC;AAAA,EAE7B,MAAM,SAAwB;AAC5B,eAAW,SAAS,KAAK,OAAO,SAAS,IAAI,KAAK,SAAS,CAAC,IAAI,GAAG;AAMjE,YAAM,iBAA2B;AAAA,QAC/B,KAAK;AAAA,QACL;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAEA,MAAY;AAAA,QACV,KAAK,UAAU;AAAA,UACb,SAAS,KAAK;AAAA,UACd;AAAA,UACA,QAAQ,KAAK;AAAA,UACb,SAAS,KAAK;AAAA,UACd,MAAM;AAAA,QACR,CAAC;AAAA,MACH;AAEA,YAAM,cAAuC;AAAA,QAC3C,kBAAkB;AAAA,MACpB;AAEA,YAAM,WAAW,MAAkB;AAAA,QACjC;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,UAAI,aAAa,GAAG;AAClB,aAAK,YAAY,yBAAyB;AAAA,UACxC;AAAA,QACF,CAAC;AACD,QAAY,sBAAU,yBAAyB,QAAQ,WAAW;AAAA,MACpE,OAAO;AACL,QAAY,iBAAK,0CAA0C;AAAA,MAC7D;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAAS,OAAa;AACpB,MAAI,sBAAsB,EAAE,QAAQ;AACtC;AAEA,KAAK;","names":[]}